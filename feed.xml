<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>TECHNOLOGY MATTERS</title>
 <link href="https://blog.brunobrant.net/feed.xml" rel="self"/>
 <link href="https://blog.brunobrant.net/"/>
 <updated>2021-03-17T04:53:26+00:00</updated>
 <id>https://blog.brunobrant.net/</id>
 <author>
   <name>Bruno Brant</name>
   <email></email>
 </author>

 
 <entry>
   <title>Parsing code with Sprache - Part 2</title>
   <link href="https://blog.brunobrant.net/parsing-code-with-sprache-part-2/"/>
   <updated>2021-03-13T10:00:00+00:00</updated>
   <id>https://blog.brunobrant.net/parsing-code-with-sprache-part-2</id>
   <content type="html">
     &lt;blockquote&gt;
  &lt;p&gt;ðŸ˜Ž This the second article of a multiple part series on how to parse code with Sprache. You can read the first part &lt;a href=&quot;2021-02-13-parsing-code-with-sprache&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the previous post, we saw how to parse some text (in particular, Java code) using &lt;a href=&quot;https://github.com/sprache/Sprache&quot;&gt;Sprache&lt;/a&gt;, a might library for C#. We saw how to use an incremental approach, and how to use unit tests to drive the development with this tool. So far we wrote a parser for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Identifier&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PackageName&lt;/code&gt; (check it &lt;a href=&quot;https://github.com/bruno-brant/dotnet-java-dependency-analyser/blob/c5f7f6ce78382ac47e8ab0d03ca43851425d1545/src/TinyJavaParser/JavaGrammar.cs&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Now we are going to move forward a bit faster. Remember that we are targeting the Java/Android source project &lt;a href=&quot;https://github.com/google/google-authenticator-android/tree/master/java/com/google/android/apps/authenticator&quot;&gt;Google Authenticator&lt;/a&gt; and that our final goal is to output a graph of class dependencies for this project. In this article, weâ€™re going to try and parse all top-level elements of the current file that weâ€™re working on, &lt;a href=&quot;https://github.com/google/google-authenticator-android/blob/master/java/com/google/android/apps/authenticator/AuthenticatorActivity.java&quot;&gt;AuthenticatorActivity.java&lt;/a&gt;.&lt;/p&gt;


     <p><a href="https://blog.brunobrant.net/parsing-code-with-sprache-part-2/">Continue reading â†’</a></p>
    </content>
 </entry>
 
 <entry>
   <title>Read my blog in portuguese or english!</title>
   <link href="https://blog.brunobrant.net/read-my-blog-in-portuguese/"/>
   <updated>2021-02-17T00:00:00+00:00</updated>
   <id>https://blog.brunobrant.net/read-my-blog-in-portuguese</id>
   <content type="html">
     &lt;p&gt;After some effort, I managed to allow my blog to become multilingual. Now all posts are in Portuguese or English. Avid readers (as if I had any!) will have noticed the icons that allow you to select the language:&lt;/p&gt;

     <p><a href="https://blog.brunobrant.net/read-my-blog-in-portuguese/">Continue reading â†’</a></p>
    </content>
 </entry>
 
 <entry>
   <title>Parsing code with Sprache - Part 1</title>
   <link href="https://blog.brunobrant.net/parsing-code-with-sprache/"/>
   <updated>2021-02-13T10:00:00+00:00</updated>
   <id>https://blog.brunobrant.net/parsing-code-with-sprache</id>
   <content type="html">
     &lt;blockquote&gt;
  &lt;p&gt;ðŸ˜Ž This the first article of a multiple part series on how to parse code with Sprache. You can read the second part &lt;a href=&quot;2021-03-13-parsing-code-with-sprache-part-2&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You probably know that sometimes (&lt;em&gt;many&lt;/em&gt; times), a developerâ€™s job is much more research or analysis than programming! In the past, there have been many instances where I was on a project where my goal was to migrate or rewrite old software, and during those engagements, I ended up creating tools to help me. Many of those tools were specialized code parsers that would automatically perform the analysis I required or even spit out newer code that I could reuse.&lt;/p&gt;

&lt;p&gt;In all those cases, I needed to parse some structured code, and thereâ€™s a simple way of doing this: by using &lt;a href=&quot;https://github.com/sprache/Sprache&quot;&gt;Sprache&lt;/a&gt;, a parsing framework for dotnet. In this article, Iâ€™m going to teach you how to do that.&lt;/p&gt;


     <p><a href="https://blog.brunobrant.net/parsing-code-with-sprache/">Continue reading â†’</a></p>
    </content>
 </entry>
 
 <entry>
   <title>Happy Halloween! My blog is back!</title>
   <link href="https://blog.brunobrant.net/happy-halloween-blog-is-back/"/>
   <updated>2020-10-31T18:00:00+00:00</updated>
   <id>https://blog.brunobrant.net/happy-halloween-blog-is-back</id>
   <content type="html">
     &lt;p&gt;This is my third or fourth attempt to create a blog, and I do hope that I succeed in keeping it up-to-date. At least now I finally have the time I need to create new posts, and keep it going. Also, I &lt;em&gt;love&lt;/em&gt; GitHub pages. Itâ€™s much nicer to be in a platform that I (kinda) control.&lt;/p&gt;

     <p><a href="https://blog.brunobrant.net/happy-halloween-blog-is-back/">Continue reading â†’</a></p>
    </content>
 </entry>
 

</feed>
